================================= BEHAVIOUR ==================================
if (already nested within target characters)
    - use default behaviour.
    if (force)
        - do function so long as target character exists on current line.
        - either bracket should do the behaviour
        if (nested)
            - edit closest matching brackets

else (ie. regular behaviour does nothing)
    - do function so long as target character exists on current line.
    - either bracket should do the behaviour
    if (force)
        - you don't need this. proceed as if we didn't force

    if (nested)
        - edit closest matching brackets


FORCE key-mapping: 
    - default: cI(
    - make user changeable

CUSTIMAZABLITY
    - forward/backward scanning precedence

===================================== NOTES ===================================
operator command: waits for you to enter a movement command
    - 'd', 'y', 'c'

" unique key mapping to function call
" <unique> causes an error if the mapping already exists (created by user)
" map <unique> <Leader>t <Plug>TestFunction

" <Leader>t calls TestFunction by default. User can change this mapping in
" .vimrc with map <leader><key> <Plug>TestFunction
if !hasmapto('<Plug>TestFunction')
    map <unique> <Leader>t <Plug>TestFunction
endif

noremap <unique> <script> <Plug>TestFunction <SID>Test
noremap <SID>Test :call <SID>Test()<CR>
" flow: <Leader>t -> <Plug>TestFunction -> <SID>Test -> :call <SID>Test()<CR>


==================================== TESTING ==================================

 function 
 {
     awefjalkjef
     if (h(yo)ello)
     {
        typej_t obj("Spencer (lall)") hehehehe
        int arr[5sdlf] = { 1, 2, 3, 4, 5 }
     }
 }
