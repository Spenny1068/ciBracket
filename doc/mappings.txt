==================================== TESTING ==================================

vid funtion(int arg1, std::string arg2) 
{
    std::vector<type_t> Vec = { 1, 2, 3, 4, 5 };
    if (isEmpty())asf
    {
        print("hllo")
        int arr[awelkjf] = { aweflkjaw {elkfjawf}}
        hello )
    }
}

"hello world", my.name is (Spencer)   -> true
hello 'world', my.name is (Spencer)   -> true
hello (world), my.name is ()   -> true, forward first
hello world, my.name is "
    dude hah"

(hello 
 world), my.name is Spencer   -> true

hello world, my.name (is 
        Spencer)

hello world), my.name (is (Spencer)   -> true, Spencer
hello world, my.name (is (Spencer))   -> true, is
================================= BEHAVIOUR ==================================
if (already nested within target characters)
    if (force)
        if (target character exists on line)
            - run
            - either bracket should do the behaviour
            if (nested)
                - edit closest matching brackets
        else (search fails)
            - do default behaviour
    else
    - use default behaviour.

else (ie. regular behaviour does nothing)
    if (force)
        - ignore. proceed as if we didn't force
    if (target character exists on line)
        - run
        - either bracket should do the behaviour
        if (nested)
            - edit closest matching brackets
    else
        - do nothing

FORCE key-mapping: 
    - default: cI(
    - make user changeable

CUSTIMAZABLITY
    - forward/backward scanning precedence

===================================== NOTES ===================================
operator command: waits for you to enter a movement command
    - 'd', 'y', 'c'

" unique key mapping to function call
" <unique> causes an error if the mapping already exists (created by user)
" map <unique> <Leader>t <Plug>TestFunction

" <Leader>t calls TestFunction by default. User can change this mapping in
" .vimrc with map <leader><key> <Plug>TestFunction
if !hasmapto('<Plug>TestFunction')
    map <unique> <Leader>t <Plug>TestFunction
endif

noremap <unique> <script> <Plug>TestFunction <SID>Test
noremap <SID>Test :call <SID>Test()<CR>
" flow: <Leader>t -> <Plug>TestFunction -> <SID>Test -> :call <SID>Test()<CR>


==================================== TESTING ==================================

void function(int arg1, std::string arg2) 
{
    std::vector<type_t> Vec = { 1, 2, 3, 4, 5 };
    if (isEmpty())
    {
        type_t ob("hello")
        int arr[5lci12] = { aweflkjaw elkfjawf}
    }
}
